unit Backend.Controller.Pagamento;

interface

uses
  Horse, FireDAC.Comp.Client, System.JSON, FireDAC.DApt,
  Backend.Dto.RetornoVenda, Rest.Json, OverbyteIcsMQTT, Backend.Model.VendaPag;

type
  TControllerPagamento = class
  private
    FConexao: TFDConnection;
    FMqtt: TIcsMQTTClient;
  public
    constructor Create(AConexao: TFDConnection);
    procedure PostPagamento(AJsonString: string);
    procedure SetMensageiro(AValue: TIcsMQTTClient);
  end;

implementation

{ TControllerVenda }

constructor TControllerPagamento.Create(AConexao: TFDConnection);
begin
  FConexao := AConexao;
end;

procedure TControllerPagamento.PostPagamento(AJsonString: string);
var
  LJsonPagamento: TJSONObject;
  LPagamento: TVendaPag;
begin
  LJsonPagamento := TJSONObject.ParseJSONValue(AJsonString) as TJSONObject;
  try
    LPagamento. := LPagamento.GetValue<integer>('id');
    LQuery.ParamByName('valor').Value := LPagamento.GetValue<Currency>('valor');
    LQuery.ParamByName('forma').AsString := LPagamento.GetValue<String>('forma');
    LQuery.ParamByName('situacao').AsString := LPagamento.GetValue<String>('situacao');
    LQuery.ExecSQL;

    FMqtt.Publish('/mqtt/payment-response-pdv',AJsonString,qtAT_LEAST_ONCE);
  finally
    LJsonPagamento.Free
  end;
end;

procedure TControllerPagamento.SetMensageiro(AValue: TIcsMQTTClient);
begin
  FMqtt := AValue;
end;

end.
